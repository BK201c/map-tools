<template>
  <div class="container">
    <div class="form-box">
      <a-divider orientation="left">服务参数</a-divider>
      <a-form-model
        :model="baseForm"
        :label-col="labelCol"
        :wrapper-col="wrapperCol"
      >
        <a-form-model-item label="服务地址">
          <a-textarea
            v-model="baseForm.url"
            placeholder=""
            :auto-size="{ minRows: 2, maxRows: 5 }"
          />
        </a-form-model-item>
        <a-form-model-item label="切片方式">
          <a-radio-group v-model="baseForm.sliceType" default-value="WMTS">
            <a-radio value="WMTS" name="sliceType">
              WMTS
            </a-radio>
            <a-radio value="REST" name="sliceType">
              REST
            </a-radio>
          </a-radio-group>
        </a-form-model-item>
        <a-form-model-item label="手动导入">
          <a-radio-group
            v-model="baseForm.isManualInput"
            :default-value="false"
          >
            <a-radio :value="true">
              是
            </a-radio>
            <a-radio :value="false">
              否
            </a-radio>
          </a-radio-group>
        </a-form-model-item>
        <a-form-model-item :wrapper-col="{ span: 12, offset: 5 }">
          <a-button type="primary" @click="previewMap">预览地图</a-button>
          <a-button
            type="primary"
            style="margin-left: 10px"
            @click="previewParams"
            >预览参数</a-button
          >
        </a-form-model-item>
        <div v-if="baseForm.isManualInput">
          <a-form-model-item label="MaxResolution">
            <a-input
              v-model="baseForm.maxResolution"
              placeholder="0级对应分辨率"
            >
            </a-input>
          </a-form-model-item>
        </div>
      </a-form-model>
      <div v-if="baseForm.isManualInput">
        <a-form-model
          :model="layerSourceForm"
          :label-col="labelCol"
          :wrapper-col="wrapperCol"
        >
          <a-form-model-item label="Projection">
            <a-radio-group
              v-model="layerSourceForm.projection"
              default-value="EPSG:4326"
            >
              <a-radio :value="'EPSG:4326'">
                EPSG:4326
              </a-radio>
              <a-radio :value="'EPSG:3857'">
                EPSG:3857
              </a-radio>
            </a-radio-group>
          </a-form-model-item>
          <a-form-model-item label="LayerName">
            <a-input v-model="layerSourceForm.layer" placeholder="图层名称" />
          </a-form-model-item>
          <a-form-model-item label="Style">
            <a-input v-model="layerSourceForm.style" placeholder="图层样式" />
          </a-form-model-item>
          <a-form-model-item label="MatrixSet">
            <a-input
              v-model="layerSourceForm.matrixSet"
              placeholder="矩形设定"
            />
          </a-form-model-item>
          <a-form-model-item label="Origin">
            <a-input
              v-model="tileGridForm.origin"
              placeholder="切片原点(x,y)以英文逗号分割"
            />
          </a-form-model-item>
          <a-form-model-item label="Center">
            <a-input
              v-model="layerSourceForm.center"
              placeholder="中心点 lng,lat"
            />
          </a-form-model-item>
          <a-form-model-item label="层级范围">
            <a-input-number
              v-model="layerSourceForm.minZoom"
              placeholder="最小层级"
              :min="0"
              :max="20"
            />
            <span>&nbsp; - &nbsp;</span>
            <a-input-number
              v-model="layerSourceForm.maxZoom"
              placeholder="最大层级"
              :min="0"
              :max="30"
            />
          </a-form-model-item>
        </a-form-model>
      </div>
    </div>
    <div class="preview-box">
      <div class="preview-map" v-show="isMapShow">
        <div id="previewMap" ref="previewMap"></div>
      </div>
      <div class="preview-params" v-if="isMapParamsShow">
        <pre><code class="language-json">{{mapParams}}</code></pre>
      </div>
    </div>
  </div>
</template>

<script>
import tileGridExt from "@/utils/tilegrid-ext.js";
import Map from "ol/Map";
import View from "ol/View";
import TileLayer from "ol/layer/Tile";
import WMTSTileGrid from "ol/tilegrid/WMTS";
import WMTS from "ol/source/WMTS";
import axios from "axios";
import Prism from "prismjs";
import "prismjs/themes/prism.css";
import "prismjs/components/prism-json";
export default {
  name: "previewMap",
  data() {
    return {
      labelCol: { span: 5 },
      wrapperCol: { span: 12 },
      formLayout: "horizontal",
      baseForm: {
        url:
          "https://services.arcgisonline.com/arcgis/rest/services/Demographics/USA_Population_Density/MapServer",
        token: "",
        sliceType: "WMTS",
        isManualInput: false,
        maxResolution: ""
      },
      layerSourceForm: {
        origin: "-180, 90",
        minZoom: 0,
        maxZoom: 20,
        center: "120.34234, 31.11424",
        projection: "EPSG:4326",
        layer: "layers",
        style: "deafult",
        matrixSet: "default028mm",
        format: "image/png",
        resolutions: [],
        matrixIds: []
      },
      map: new Map(),
      isMapShow: true,
      isMapParamsShow: false,
      mapParams: {}
    };
  },
  created() {
    this.initMock();
  },
  mounted() {},
  components: {},
  methods: {
    initMock() {
      this.layerSourceForm = {
        origin: "-2.0037508342787E7,2.0037508342787E7",
        minZoom: 0,
        maxZoom: 20,
        center: "-11158582,4813697",
        projection: "EPSG:3857",
        layer: "Layers",
        style: "default",
        matrixSet: "default028mm",
        format: "image/PNG32"
      };
    },
    // 表单验证
    isValidatePass(form) {
      const bbox = form.bbox.split(",");
      if (bbox.length !== 2 || bbox.length !== 4) {
        this.$message.error("请输入正确的点位格式", 2);
      }
    },

    //创建wmts图层
    createWMTS(sourceOption, tileGrid) {
      return new Promise(reslove => {
        const { layer, style, matrixSet, projection } = sourceOption;
        const smOption = {
          layer,
          style,
          matrixSet,
          projection,
          tileGrid: new WMTSTileGrid(tileGrid)
        };
        console.log(smOption);
        reslove(
          new TileLayer({
            source: new WMTS(smOption)
          })
        );
      });
    },

    // 通过mapserver获取切片信息
    getGridByServer(url) {
      return new Promise(reslove => {
        axios.get(url, { params: { f: "json" } }).then(res => {
          const { tileInfo } = res.data;
          const tileGrid = tileGridExt.getResolutionByJson(tileInfo);
          reslove(tileGrid);
        });
      });
    },

    getGridByFrom() {
      return new Promise(reslove => {
        const { resolutions, matrixIds } = tileGridExt.getResolutionByCalc(
          this.layerSourceForm.maxZoom,
          this.baseForm.maxResolution
        );
        const origin = this.layerSourceForm.origin
          ?.split(",")
          .map(v => Number(v));
        reslove({ resolutions, matrixIds, origin });
      });
    },

    async previewMap() {
      const tileGrid = this.baseForm.isManualInput
        ? this.getGridByFrom()
        : await this.getGridByServer(this.baseForm.url.trim());

      const layer =
        this.baseForm.sliceType === "WMTS"
          ? await this.createWMTS(this.layerSourceForm, tileGrid)
          : this.createWMS(this.layerSourceForm, tileGrid);
      const viewOption = {
        center: this.layerSourceForm.center?.split(",").map(v => Number(v)),
        minZoom: this.layerSourceForm.minZoom,
        maxZoom: this.layerSourceForm.maxZoom,
        projection: this.layerSourceForm.projection,
        zoom: 5
      };
      console.log(viewOption);
      // this.isMapShow = true;
      console.log(this.map);
      this.$nextTick(() => {
        this.map.setTarget(this.$refs.previewMap);
        this.map.setView(new View(viewOption));
        this.map.addLayer(layer);
      });
    },

    async previewParams() {
      await this.getGridByServer(this.form.url.trim()).then(res => {
        this.mapParams = res;
      });
      this.$nextTick(() => {
        this.isMapParamsShow = true;
        Prism.highlightAll();
      });
    }
  }
};
</script>
<style lang="scss" scoped>
.container {
  display: flex;
}
.form-box {
  width: 600px;
}
.preview-box {
  flex-grow: 1;
  padding: 0 15px;
  #previewMap {
    width: 100%;
    min-width: 200px;
    min-height: 100px;
    height: 250px;
    border: 1px solid #d5d5d5;
  }
  .preview-params {
    width: 100%;
    min-width: 200px;
    max-width: calc(80vw - 600px);
    max-height: 400px;
    overflow-y: scroll;
  }
}
</style>
